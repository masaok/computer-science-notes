import * as math from 'mathjs'

class SlotMachine {
  private winProbability: number
  private trials: number = 0
  private wins: number = 0

  constructor(winProbability: number) {
    this.winProbability = winProbability
  }

  public play(): boolean {
    this.trials++
    const win = math.random() < this.winProbability
    if (win) {
      this.wins++
    }
    return win
  }

  public getWinRate(): number {
    if (this.trials === 0) return 0
    return this.wins / this.trials
  }

  public getTrials(): number {
    return this.trials
  }
}

class BanditProblem {
  private machines: SlotMachine[]
  private totalPlays: number = 0
  private exploreRate: number

  constructor(machines: number[], exploreRate: number) {
    this.machines = machines.map(prob => new SlotMachine(prob))
    this.exploreRate = exploreRate
  }

  public playMachines(rounds: number): void {
    for (let i = 0; i < rounds; i++) {
      this.totalPlays++
      const shouldExplore = math.random() < this.exploreRate

      let machineIndex: number
      if (shouldExplore || this.totalPlays < 10) {
        // Randomly select a machine to explore
        machineIndex = math.floor(math.random() * this.machines.length)
      } else {
        // Exploit the best-known machine
        machineIndex = this.machines.reduce(
          (bestIndex, machine, index, array) =>
            machine.getWinRate() > array[bestIndex].getWinRate() ? index : bestIndex,
          0
        )
      }

      const win = this.machines[machineIndex].play()
      console.log(
        `Playing machine #${machineIndex + 1}, Win: ${win}, Strategy: ${shouldExplore ? 'Explore' : 'Exploit'}`
      )
    }
  }
}

// Example probabilities for 5 machines and exploration rate of 10%
const banditProblem = new BanditProblem([0.15, 0.3, 0.45, 0.25, 0.05], 0.1)
banditProblem.playMachines(100)
